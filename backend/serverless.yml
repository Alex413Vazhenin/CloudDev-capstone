service:
  name: serverless-capstone

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}

  tracing:
  lambda: true
  apiGateway: true

  environment:
    MAGAZINES_TABLE: Magazines-${self:provider.stage}
    INDEX_NAME: CREATED_INDEX
    ATTACHMENTS_S3_BUCKET: sls-udagram-vazhenin-attachments-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 3600
    AUTH_0_JWKS_URL: dev-r82qdi-o.eu.auth0.com/.well-known/jwks.json

custom:
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      inMemory: true
      migrate: true 


functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # GetMagazine
  GetMagazines:
    handler: src/lambda/http/getMagazines.handler
    events:
      - http:
          method: get
          path: magazines
          cors: true
          auth: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - "*"

  # CreateMagazines
  CreateMagazine:
    handler: src/lambda/http/createMagazine.handler
    events:
      - http:
          method: post
          path: magazines
          cors: true
          auth: Auth
          request:
            schema:
              application/json: ${file(src/models/create-magazine-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: "*"

  # UpdateMagazine
  UpdateMagazine:
    handler: src/lambda/http/updateMagazine.handler
    events:
      - http:
          method: patch
          path: magazines/{magazineId}
          cors: true
          auth: Auth
          request:
            schema:
              application/json: ${file(src/models/update-magazine-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - "*"
        
  # Delete magazine
  DeleteMagazine:
    handler: src/lambda/http/deleteMagazine.handler
    events:
      - http:
          method: delete
          path: magazines/{magazineId}
          cors: true
          auth: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource:
          - "*"

  # GenerateUploadUrl
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: magazines/{magazineId}/attachment
          cors: true
          auth: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource:
          - "*"

resources:
  Resources:

    MagazinesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: magazineId
            AttributeType: S
          - AttributeName: topic
            AttributeType: S 
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: magazineId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.MAGAZINES_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_NAME}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: topic
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENTS_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
          PolicyDocument:
            Id: Policy
            Version: "2012-10-17"
            Statement:
              - Sid: PublicReadForGetBucketObjects
                Effect: Allow
                Principal: '*'
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*'
          Bucket: !Ref AttachmentsBucket

